// This file was generated by prisma-merge-schema (https://www.npmjs.com/package/prisma-merge-schema)
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
model Attachments {
    id          String    @id @default(uuid())
    name        String?
    path        String?
    type        String?
    status      Int?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime?
    createdById String?
    createdBy   Users?    @relation("AttachmentsCreatedBy", fields: [createdById], references: [id])
    updatedById String?
    updatedBy   Users?    @relation("AttachmentsUpdatedBy", fields: [updatedById], references: [id])

    books Books[] @relation("BooksAttachment")
}
model Books {
  id           String       @id @default(uuid())
  nameTh       String?      @unique
  nameEn       String?      @unique
  author       String?
  publisher    String?
  attachmentId String?
  attachment   Attachments? @relation("BooksAttachment", fields: [attachmentId], references: [id])
  rating       Int?
  price        Int?
  discount     Int?
  description  String?
  summary      String?
  status       Boolean?     @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?
  createdById  String?
  createdBy    Users?       @relation("BooksCreatedBy", fields: [createdById], references: [id])
  updatedById  String?
  updatedBy    Users?       @relation("BooksUpdatedBy", fields: [updatedById], references: [id])

  stocks Stock[] @relation("StockBook")
}
model Carts {
  id          String    @id @default(uuid())
  userId      String?
  bookId      String?
  orderPrice  Float?
  status      Int?
  orderType   Int?
  rentAt      DateTime?
  rentTo      DateTime?
  buyAt       DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  createdById String?
  createdBy   Users?    @relation("CartsCreatedBy", fields: [createdById], references: [id])
  updatedById String?
  updatedBy   Users?    @relation("CartsUpdatedBy", fields: [updatedById], references: [id])
}
model Category {
  id          String    @id @default(uuid())
  name        String?
  status      Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  createdById String?
  createdBy   Users?    @relation("CategoryCreatedBy", fields: [createdById], references: [id])
  updatedById String?
  updatedBy   Users?    @relation("CategoryUpdatedBy", fields: [updatedById], references: [id])
}
model Roles {
  id          String      @id @default(uuid())
  name        String?     @unique
  description String?
  status      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?
  createdById String?
  createdBy   Users?      @relation("RolesCreatedBy", fields: [createdById], references: [id])
  updatedById String?
  updatedBy   Users?      @relation("RolesUpdatedBy", fields: [updatedById], references: [id])
  users   UserRoles[]
}
model Stock {
  id          String    @id @default(uuid())
  bookId      String?
  book        Books?    @relation("StockBook", fields: [bookId], references: [id])
  inventory   Int?
  unitPrice   Float?
  totalPrice  Float?
  remark      String?
  status      Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  createdById String?
  createdBy   Users?    @relation("StockCreatedBy", fields: [createdById], references: [id])
  updatedById String?
  updatedBy   Users?    @relation("StockUpdatedBy", fields: [updatedById], references: [id])
}
model UserRoles {
  user        Users?    @relation(fields: [userId], references: [id])
  userId      String
  role        Roles?    @relation(fields: [roleId], references: [id])
  roleId      String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?
  createdById String?
  createdBy   Users?    @relation("UserRolesCreatedBy", fields: [createdById], references: [id])
  updatedById String?
  updatedBy   Users?    @relation("UserRolesUpdatedBy", fields: [updatedById], references: [id])

  @@id([userId, roleId]) // Composite Primary Key
}
model Users {
  id                 String         @id @default(uuid())
  email              String         @unique
  password           String?
  firstname          String?
  lastname           String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime?
  status             Boolean        @default(true)
  sessions           UserSessions[]
  // Self-relations
  createdById        String?
  createdBy          Users?         @relation("UsersCreatedBy", fields: [createdById], references: [id])
  createdUsers       Users[]        @relation("UsersCreatedBy")
  updatedById        String?
  updatedBy          Users?         @relation("UsersUpdatedBy", fields: [updatedById], references: [id])
  updatedUsers       Users[]        @relation("UsersUpdatedBy")
  // Reverse relations from other models
  attachmentsCreated Attachments[]  @relation("AttachmentsCreatedBy")
  attachmentsUpdated Attachments[]  @relation("AttachmentsUpdatedBy")
  booksCreated       Books[]        @relation("BooksCreatedBy")
  booksUpdated       Books[]        @relation("BooksUpdatedBy")
  cartsCreated       Carts[]        @relation("CartsCreatedBy")
  cartsUpdated       Carts[]        @relation("CartsUpdatedBy")
  categoriesCreated  Category[]     @relation("CategoryCreatedBy")
  categoriesUpdated  Category[]     @relation("CategoryUpdatedBy")
  rolesCreated       Roles[]        @relation("RolesCreatedBy")
  rolesUpdated       Roles[]        @relation("RolesUpdatedBy")
  stockCreated       Stock[]        @relation("StockCreatedBy")
  stockUpdated       Stock[]        @relation("StockUpdatedBy")
  userRolesCreated   UserRoles[]    @relation("UserRolesCreatedBy")
  userRolesUpdated   UserRoles[]    @relation("UserRolesUpdatedBy")
  roles              UserRoles[]
}
model UserSessions {
  id         String    @id @default(uuid())
  userId     String?
  deviceInfo String?
  ipAddress  String?
  userAgent  String?
  token      String    @unique
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime  @updatedAt
  expiredAt  DateTime?
  isActive   Boolean   @default(true)
  status     Boolean   @default(true)
  user       Users?    @relation(fields: [userId], references: [id])
}
